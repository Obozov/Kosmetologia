<!-- Стилі для body -->
<style>
	.lock body {
		overflow: hidden;
		touch-action: none;
		overscroll-behavior: none;
		transform:  translateY(-1000px);
	}

	.loading body {
		opacity: 0;
		visibility: hidden;
	}

	.loaded body {
		transform:  translateY(0px);

		transition: all 0.5s ease 0s;
		opacity: 1;
		visibility: visible;
	}
</style>
<div id="fls-preloader">
	<!-- Документація: https://template.fls.guru/template-docs/modul-preloader.html -->
	<!-- Стилі для прелоадера -->
	<style>
		* {
			padding: 0px;
			margin: 0px;
			border: 0px;
		}

		*,
		*:before,
		*:after {
			box-sizing: border-box;
		}

		html {
			overflow: hidden;
			touch-action: none;
		}

		body {
			background-image: url("../img/bg.png");
			margin: 0;
			padding: 0;
			padding-right: 15px;
		}

		#preloader {
			width: 400px;
			height: 400px;
			position: absolute;
			top: 50%;
			left: 50%;
			transform: translateY(-50%) translateX(-50%);
		}

		#preloader circle.outer {
			fill: transparent;
			stroke: #fd3b9a;
			stroke-dashoffset: 1000;
			stroke-width: 20;
			stroke-dasharray: 1000;
			transform-origin: 50% 50%;
			animation: spin 2s linear forwards infinite;
		}

		@keyframes spin {
			0% {
				stroke-dashoffset: 1000;
				transform: rotate(-90deg);
				stroke-width: 20;
			}

			25% {
				stroke-dashoffset: 800;
				stroke-width: 30;
			}

			80% {
				stroke-dashoffset: 1000;
				transform: rotate(270deg);
				stroke-width: 20;
			}
		}

		#preloader circle.drop {
			fill: #2d6ed1;
			stroke: transparent;
			transform-origin: 50% 50%;
			animation: drop 2s linear forwards infinite;
		}

		@keyframes drop {
			0% {
				transform: translate(0, -150px);
				opacity: 1;
			}

			34% {
				transform: translate(0, 150px);
				opacity: 1;
			}

			70% {
				transform: translate(0, 0);
				opacity: 0;
			}

			100% {
				opacity: 0;
			}
		}
	</style>
	<!-- Скріпт прелоадера -->
	<script>
		function preloader() {
			const preloaderImages = document.querySelector('[data-preloader]') ? document.querySelectorAll('[data-preloader] img') : document.querySelectorAll('img');
			const preloaderContainer = document.querySelector('#fls-preloader');
			if (preloaderImages.length) {
				const preloaderTemplate = `
					<div class="fls-preloader">
						<div class="fls-preloader__body">
							<svg height="400" width="400" id="preloader">
								<g filter="url(#goo)">
									<circle class="outer" cx="200" cy="200" r="150" />
									<circle class="drop" cx="200" cy="200" r="20">
								</g>

								<defs>
									<filter id="goo">
										<feGaussianBlur in="SourceGraphic" stdDeviation="8" result="blur" />
										<feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />

									</filter>
								</defs>
								</svg>
						</div>
					</div>`;
				document.querySelector('html').insertAdjacentHTML("beforeend", preloaderTemplate);

				const
					preloader = document.querySelector('.fls-preloader'),
					showPecentLoad = document.querySelector('.fls-preloader__counter'),
					showLineLoad = document.querySelector('.fls-preloader__line span'),
					htmlDocument = document.documentElement;

				let imagesLoadedCount = counter = progress = 0;

				htmlDocument.classList.add('loading');
				htmlDocument.classList.add('lock');

				preloaderImages.forEach(preloaderImage => {
					const imgClone = document.createElement('img');
					if (imgClone) {
						imgClone.onload = imageLoaded;
						imgClone.onerror = imageLoaded;
						preloaderImage.dataset.src ? imgClone.src = preloaderImage.dataset.src : imgClone.src = preloaderImage.src;
					}
				});
				function setValueProgress(progress) {
					showPecentLoad ? showPecentLoad.innerText = `${progress}%` : null;
					showLineLoad ? showLineLoad.style.width = `${progress}%` : null;
				}
				showPecentLoad ? setValueProgress(progress) : null;

				function imageLoaded() {
					imagesLoadedCount++;
					progress = Math.round((100 / preloaderImages.length) * imagesLoadedCount);
					const intervalId = setInterval(() => {
						counter >= progress ? clearInterval(intervalId) : setValueProgress(++counter);
						counter >= 100 ? addLoadedClass() : null;
					}, 10);
				}
				function addLoadedClass() {
					htmlDocument.classList.add('loaded');
					htmlDocument.classList.remove('lock');
					htmlDocument.classList.remove('loading');
					setInterval(() => {
						preloader.remove();
						preloaderContainer.remove();
					}, 500);
				}
			} else {
				preloaderContainer.remove();
			}
		}
		preloader();
	</script>
</div>